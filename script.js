// –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
const translations = {
    ru: {
        welcome: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        description: "–ú—ã –ø–æ–º–æ–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –ø–µ—Ä–µ–µ–∑–¥ –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –ø—Ä–æ—Å—Ç—ã–º –∏ —É–¥–æ–±–Ω—ã–º.",
        consultation: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
        formTitle: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É",
        nameLabel: "–í–∞—à–µ –∏–º—è",
        emailLabel: "–í–∞—à Email",
        questionLabel: "–í–∞—à –≤–æ–ø—Ä–æ—Å",
        submitButton: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
    },
    kz: {
        welcome: "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑–¥–µ—Ä!",
        description: "–ë—ñ–∑ —Å—ñ–∑–¥—ñ“£ “ö—ã—Ç–∞–π–¥–∞–Ω “ö–∞–∑–∞“õ—Å—Ç–∞–Ω“ì–∞ –∫”©—à—É—ñ“£—ñ–∑–¥—ñ “õ–∞—Ä–∞–ø–∞–π—ã–º ”ô—Ä—ñ —ã“£“ì–∞–π–ª—ã –µ—Ç—É–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ–º—ñ–∑.",
        consultation: "–ö–µ“£–µ—Å –∞–ª—É",
        formTitle: "”®—Ç—ñ–Ω—ñ–º–¥—ñ —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑",
        nameLabel: "–°—ñ–∑–¥—ñ“£ –∞—Ç—ã“£—ã–∑",
        emailLabel: "–°—ñ–∑–¥—ñ“£ Email –º–µ–∫–µ–Ω–∂–∞–π—ã“£—ã–∑",
        questionLabel: "–°—ñ–∑–¥—ñ“£ —Å“±—Ä–∞–Ω—ã–º—ã“£—ã–∑",
        submitButton: "–ñ—ñ–±–µ—Ä—É",
    },
    cn: {
        welcome: "Ê¨¢ËøéÔºÅ",
        description: "Êàë‰ª¨Â∏ÆÂä©ÊÇ®ËΩªÊùæÊñπ‰æøÂú∞‰ªé‰∏≠ÂõΩÊê¨Âà∞ÂìàËê®ÂÖãÊñØÂù¶„ÄÇ",
        consultation: "Ëé∑ÂèñÂí®ËØ¢",
        formTitle: "Â°´ÂÜôÁî≥ËØ∑",
        nameLabel: "ÊÇ®ÁöÑÂêçÂ≠ó",
        emailLabel: "ÊÇ®ÁöÑÁîµÂ≠êÈÇÆÁÆ±",
        questionLabel: "ÊÇ®ÁöÑÈóÆÈ¢ò",
        submitButton: "Êèê‰∫§",
    },
};

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
function switchLanguage(lang) {
    const elementsToUpdate = Object.keys(translations[lang]);
    elementsToUpdate.forEach((id) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = translations[lang][id];
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
document.querySelectorAll(".lang-switch").forEach((button) => {
    button.addEventListener("click", () => {
        const lang = button.getAttribute("data-lang");
        switchLanguage(lang);
    });
});

const express = require("express");
const fetch = require("node-fetch");

const app = express();
app.use(express.json());

const botToken = "8144023433:AAFcqkU5A23WP3gdpRWlp8OFLBP_O5xDm84";
const chatId = "909383897";

app.post("/send-message", async (req, res) => {
    const { name, email, question } = req.body;
    const message = `üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\nüë§ –ò–º—è: ${name}\nüìß Email: ${email}\n‚ùì –í–æ–ø—Ä–æ—Å: ${question}`;

    try {
        const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ chat_id: chatId, text: message }),
        });

        if (response.ok) {
            res.status(200).send("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
        } else {
            res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.");
        }
    } catch (error) {
        res.status(500).send("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API.");
    }
});

app.listen(3000, () => console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"));
